package application.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import application.model.User;
import application.model.Role;
import application.model.dto.UserDTO;
import application.repository.RoleRepository;
import application.repository.UserRepository;
import application.service.UserService;

@Service
public class UserServiceImpl implements UserService {

	@Autowired
	private UserRepository userRepository;
	@Autowired
	private RoleRepository roleRepository;
	@Autowired
	private PasswordEncoder passwordEncoder;
	@Override
	public User findById(Long id) throws AccessDeniedException {
		return userRepository.findById(id).orElseGet(null);
	}

	@Override
	public User findByUsername(String username) throws UsernameNotFoundException {
		return userRepository.findByUsername(username);
	}

	@Override
	public List<User> findAll() throws AccessDeniedException {
		return userRepository.findAll();
	}

	@Override
	public User save(User user) {
		return userRepository.save(user);
	}

	@Override
	public void enableUser(Long userId) {
		User user = userRepository.findById(userId).orElseGet(null);
		user.setEnabled(true);
		userRepository.save(user);
	}

	@Override
	public void deleteUser(Long userId) {
		User user = userRepository.findById(userId).orElseGet(null);
		user.setDeleted(true);		
		userRepository.save(user);
	}

	@Override
	public void updateUser(UserDTO userDTO) {
		User user = userRepository.findById(userDTO.getId()).orElseGet(null);
		user.setFirstName(userDTO.getFirstName());
		user.setLastName(userDTO.getLastName());
		user.setAddress(userDTO.getAddress());
		user.setCity(userDTO.getCity());
		user.setCountry(userDTO.getCountry());
		user.setPhone(userDTO.getPhone());
		user.setUsername(userDTO.getUsername());
		user.setEmail(userDTO.getEmail());
		user.setPassword(passwordEncoder.encode(userDTO.getPassword1()));
		List<Role> roles = new ArrayList<Role>();
		roles = roleRepository.findByName(userDTO.getRole());
		user.setRoles(roles);
		userRepository.save(user);
	}

	@Override
	public User createUser(UserDTO userDTO) {
		 User user = new User();
		 user.setFirstName(userDTO.getFirstName());
		 user.setLastName(userDTO.getLastName());
		 user.setAddress(userDTO.getAddress());
		 user.setCity(userDTO.getCity());
		 user.setCountry(userDTO.getCountry());
		 user.setPhone(userDTO.getPhone());
		 user.setUsername(userDTO.getUsername());
		 user.setEmail(userDTO.getEmail());
		 user.setPassword(passwordEncoder.encode(userDTO.getPassword1()));
		 user.setEnabled(false);
		 user.setDeleted(false);
		 List<Role> roles = new ArrayList<Role>();
		 roles = roleRepository.findByName(userDTO.getRole());
		 for(Role r: roles) {
			 System.out.println(r.getName());
		 }
		 user.setRoles(roles);
		 userRepository.save(user);
		 return user;
	}
	

}
