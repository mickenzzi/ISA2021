package application.controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;

import application.model.User;
import application.model.Role;
import application.model.dto.JwtAuthenticationRequest;
import application.model.dto.UserDTO;
import application.model.dto.UserLoginDTO;
import application.service.UserService;
import application.service.impl.CustomUserDetailsService;
//import application.util.TokenUtils;

@RestController
@RequestMapping(value = "/auth", produces = MediaType.APPLICATION_JSON_VALUE)
public class AuthenticationController {
	//@Autowired
	//private TokenUtils tokenUtils;
	@Autowired
	private CustomUserDetailsService cuds;
	
	@Autowired
	private AuthenticationManager authenticationManager;

	@Autowired
	private UserService userService;

	
	/*
	@GetMapping("/login")
	public ResponseEntity<> createAuthenticationToken(
			@RequestBody JwtAuthenticationRequest authenticationRequest) throws Exception{
	
		/*Authentication authentication = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(
				authenticationRequest.getUsername(), authenticationRequest.getPassword()));

		
		SecurityContextHolder.getContext().setAuthentication(authentication);
		User user = (User) cuds.loadUserByUsername(authenticationRequest.getUsername());
		List<Role> roles = new ArrayList<Role>(); 
		System.out.println("Usao u controller");
		System.out.println(user.getUsername());
		roles = user.getRoles();
		Role role = roles.get(0);
		String role1 = role.getName();
		UserLoginDTO udto = new UserLoginDTO();
		udto.setId(user.getId());
		udto.setRole(role1);
		//String jwt = tokenUtils.generateToken(user.getUsername());
		//int expiresIn = tokenUtils.getExpiredIn();		
		System.out.println(authenticationRequest.getUsername());
		return new ResponseEntity<>(HttpStatus.OK);
	}*/
	
	@GetMapping(value = "/login", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<UserLoginDTO> login(@RequestBody JwtAuthenticationRequest authr) {
		User user = (User) cuds.loadUserByUsername(authr.getUsername());
		System.out.println("Usao u kontroler");
		System.out.println(user.getUsername());
		List<Role> roles = new ArrayList<Role>(); 
		System.out.println("Usao u controller");
		System.out.println(user.getUsername());
		roles = user.getRoles();
		Role role = roles.get(0);
		String role1 = role.getName();
		UserLoginDTO udto = new UserLoginDTO();
		udto.setId(user.getId());
		udto.setRole(role1);
		return new ResponseEntity<>(udto, HttpStatus.OK);
	}

}
