package application.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import application.model.Comment;
import application.model.Review;
import application.service.CommentService;

@RestController
@RequestMapping(value = "/api/comments")
public class CommentController {
	@Autowired
	private CommentService commentService;
	
	@GetMapping(value = "/getAllComments", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<List<Comment>> getAllComments() {
		List<Comment> comments = commentService.findAll();
		System.out.println("The task /getAllComments was successfully completed.");
		return new ResponseEntity<>(comments, HttpStatus.OK);
	}
	
	@GetMapping(value = "/getCommentById/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Comment> getCommentById(@PathVariable("id") Long id) {
		Comment comment = commentService.findById(id);
		if (comment == null) {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
		else {
			return new ResponseEntity<>(comment, HttpStatus.OK);
		}
	}
	

	@PostMapping(value = "/createComment/{userId}/{instructorId}", produces = MediaType.APPLICATION_JSON_VALUE )
	public ResponseEntity<Comment> createComment(@RequestBody Comment comment1,@PathVariable("userId") Long userId,@PathVariable("instructorId") Long instructorId) {
		Review review = reviewService.create(review1,adventureId);
		System.out.println("The task /createReview was successfully completed.");
		return new ResponseEntity<>(review, HttpStatus.CREATED);
	}
}
