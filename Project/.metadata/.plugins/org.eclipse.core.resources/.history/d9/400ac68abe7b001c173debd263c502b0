package application.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import application.model.Comment;
import application.model.Complaint;
import application.service.ComplaintService;

@RestController
@RequestMapping(value = "/api/complains")
public class ComplaintController {
	@Autowired
	private ComplaintService complaintService;
	
	@GetMapping(value = "/getAllComplains", produces = MediaType.APPLICATION_JSON_VALUE)
	//@PreAuthorize("hasRole('ADMIN')")
	public ResponseEntity<List<Complaint>> getAllComplains() {
		List<Complaint> complains = complaintService.findAll();
		System.out.println("The task /getAllComplains was successfully completed.");
		return new ResponseEntity<>(complains, HttpStatus.OK);
	}

	@GetMapping(value = "/getComplaintById/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
	//@PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
	public ResponseEntity<Complaint> getComplaintById(@PathVariable("id") Long id) {
		Complaint complaint = complaintService.findById(id);
		if (complaint == null) {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		} else {
			return new ResponseEntity<>(complaint, HttpStatus.OK);
		}
	}
	
	@GetMapping(value = "/deleteComplaint/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
	//@PreAuthorize("hasRole('ADMIN')")
	public ResponseEntity<Comment> deleteComplaint(@PathVariable("id") Long id) {
		if (id == null) {
			System.out.println("Id is null.");
			return new ResponseEntity<>(HttpStatus.BAD_GATEWAY);
		}
		complaintService.delete(id);
		System.out.println("The task /deleteComplaint was successfully completed.");
		return new ResponseEntity<>(HttpStatus.OK);
	}

	@PostMapping(value = "/createComplaint/{userId}/{adventureId}", produces = MediaType.APPLICATION_JSON_VALUE)
	//@PreAuthorize("hasRole('ADMIN')")
	public ResponseEntity<Complaint> createComplaint(@RequestBody Complaint complaint1, @PathVariable("userId") Long userId,
			@PathVariable("adventureId") Long adventureId) {
		Complaint complaint = complaintService.create(complaint1, userId, adventureId);
		System.out.println("The task /createComplaint was successfully completed.");
		return new ResponseEntity<>(complaint, HttpStatus.CREATED);
	}
	
	@PostMapping(value = "/answer/{adminId}/{complaintId}", produces = MediaType.APPLICATION_JSON_VALUE)
	//@PreAuthorize("hasRole('ADMIN')")
	public ResponseEntity<Complaint> answer(@RequestBody Complaint complaint1, @PathVariable("adminId") Long adminId,
			@PathVariable("complaintId") Long complaintId) {
		Complaint complaint = complaintService.answer(complaint1, adminId, complaintId);
		System.out.println("The task /answer was successfully completed.");
		return new ResponseEntity<>(complaint, HttpStatus.CREATED);
	}
}
