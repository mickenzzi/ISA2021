package application.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import application.model.Adventure;
import application.model.Termin;
import application.service.TerminService;

@RestController
@RequestMapping(value = "/api/termins")
public class TerminController {
	@Autowired
	private TerminService terminService;

	@GetMapping(value = "/getAllTermins", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<List<Termin>> getAllTermins() {
		List<Termin> termins = new ArrayList<Termin>();
		termins = terminService.findAll();
		System.out.println("The task /getAllTermins was successfully completed.");
		return new ResponseEntity<>(termins, HttpStatus.OK);
	}

	@GetMapping(value = "/getTerminById/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Termin> getTerminById(@PathVariable("id") Long id) {
		Termin termin = terminService.findById(id);
		if (termin == null) {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		} else {
			System.out.println("The task /getTermin was successfully completed.");
			return new ResponseEntity<>(termin, HttpStatus.OK);
		}
	}

	@PostMapping(value = "/updateTermin", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Adventure> updateTermin(@RequestBody Termin termin1) throws Exception {
		Termin termin = terminervice.findById(termin1.getId());
		if (adventure == null) {
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}

		adventureService.updateAdventure(adventure1);
		return new ResponseEntity<>(adventure, HttpStatus.OK);
	}

	@PostMapping(value = "/createAdventure", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Adventure> createAdventure(@RequestBody Adventure adventure1) {

		Adventure adventure = adventureService.createAdventure(adventure1);
		System.out.println("The task /createUser was successfully completed.");
		return new ResponseEntity<>(adventure, HttpStatus.CREATED);

	}
}
