package application.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import application.model.Adventure;
import application.model.User;
import application.model.dto.UserDTO;
import application.service.AdventureService;

@RestController
@RequestMapping(value = "/api/adventures")
public class AdventureController {
	@Autowired
	private AdventureService adventureService;
	
	@GetMapping(value = "/getAllAdventures", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<List<Adventure>> getAllAdventures() {
		List<Adventure> adventures = new ArrayList<Adventure>();
		adventures = adventureService.findAll();
		System.out.println("The task /getAllUsers was successfully completed.");
		return new ResponseEntity<>(adventures, HttpStatus.OK);
	}
	
	@GetMapping(value = "/getAdventureById/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Adventure> getAdventureById(@PathVariable("id") Long id) {
		Adventure adventure = adventureService.findById(id);
		if (adventure == null) {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
		else {
			return new ResponseEntity<>(adventure, HttpStatus.OK);
		}
	}
	
	@PostMapping(value = "/updateAdventure", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Adventure> updateAdventure(@RequestBody Adventure adventure1) throws Exception {
		Adventure adventure = adventureService.findById(adventure1.getId());
		if (adventure == null) {
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}
		
		adventureService.updateAdventure(adventure1);
		return new ResponseEntity<>(adventure, HttpStatus.OK);
	}
	
	@PostMapping(value = "/createAdventure", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<User> createUser(@RequestBody Adventure adventure1) {
		if (userDTO.getFirstName().isEmpty() || userDTO.getLastName().isEmpty() || userDTO.getAddress().isEmpty()
				|| userDTO.getCity().isEmpty() || userDTO.getCountry().isEmpty() || userDTO.getPhone().isEmpty()
				|| userDTO.getEmail().isEmpty() || userDTO.getUsername().isEmpty() || userDTO.getPassword1().isEmpty()
				|| userDTO.getPassword2().isEmpty() || userDTO.getRole().isEmpty()) {
			System.out.println("Error-some field are empty");
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		} else {
			if (userDTO.getPassword1().equals(userDTO.getPassword2()) && userDTO.getPassword1().length()>=3) {
				User existUser = this.userService.findByUsername(userDTO.getUsername());
				if (existUser != null) {
					System.out.println("Username already exists");
					return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
				}
				else {	
				User user = userService.createUser(userDTO);
				System.out.println("The task /createUser was successfully completed.");
				return new ResponseEntity<>(user, HttpStatus.CREATED);
				}
			} else {
				System.out.println("Error-passwords don't match or password are too low.");
				return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
			}
		}

	}

}
