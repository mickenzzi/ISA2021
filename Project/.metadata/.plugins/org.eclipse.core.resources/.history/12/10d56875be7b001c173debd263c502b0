package application.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import application.model.Comment;
import application.service.CommentService;

@RestController
@RequestMapping(value = "/api/comments")
@CrossOrigin
public class CommentController {
	@Autowired
	private CommentService commentService;
	
	
	@GetMapping(value = "/getAllComments", produces = MediaType.APPLICATION_JSON_VALUE)
	//@PreAuthorize("hasRole('ADMIN')")
	public ResponseEntity<List<Comment>> getAllComments() {
		List<Comment> comments = commentService.findAll();
		System.out.println("The task /getAllComments was successfully completed.");
		return new ResponseEntity<>(comments, HttpStatus.OK);
	}

	@GetMapping(value = "/getCommentById/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
	//@PreAuthorize("hasRole('ADMIN')")
	public ResponseEntity<Comment> getCommentById(@PathVariable("id") Long id) {
		Comment comment = commentService.findById(id);
		if (comment == null) {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		} else {
			return new ResponseEntity<>(comment, HttpStatus.OK);
		}
	}

	@PostMapping(value = "/createComment/{userId}/{instructorId}", produces = MediaType.APPLICATION_JSON_VALUE)
	//@PreAuthorize("hasRole('INSTRUCTOR')")
	public ResponseEntity<Comment> createComment(@RequestBody Comment comment1, @PathVariable("userId") Long userId,
			@PathVariable("instructorId") Long instructorId) {
		Comment comment = commentService.create(comment1, userId, instructorId);
		System.out.println("The task /createComment was successfully completed.");
		return new ResponseEntity<>(comment, HttpStatus.CREATED);
	}
	
	@GetMapping(value = "/enableComment/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
	//@PreAuthorize("hasRole('ADMIN')")
	public ResponseEntity<Comment> enableComment(@PathVariable("id") Long id) {
		if (id == null) {
			System.out.println("Id is null.");
			return new ResponseEntity<>(HttpStatus.BAD_GATEWAY);
		}
		Comment comment = commentService.enableComment(id);
		System.out.println("The task /enableComment was successfully completed.");
		return new ResponseEntity<>(comment,HttpStatus.OK);
	}
	
	@GetMapping(value = "/deleteComment/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
	//@PreAuthorize("hasRole('ADMIN') or hasRole('INSTRUCTOR')")
	public ResponseEntity<Comment> deleteComment(@PathVariable("id") Long id) {
		if (id == null) {
			System.out.println("Id is null.");
			return new ResponseEntity<>(HttpStatus.BAD_GATEWAY);
		}
		commentService.delete(id);
		System.out.println("The task /deleteComment was successfully completed.");
		return new ResponseEntity<>(HttpStatus.OK);
	}
}
